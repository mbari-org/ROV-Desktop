/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mwt
{
    public sealed class mini_rov_status_t : LCM.LCM.LCMEncodable
    {
        public mwt.header_t header;
        public bool auto_head;
        public bool auto_vert;
        public bool adv_nav;
        public double auto_head_sp;
        public double auto_depth_sp;
        public double x_pilot;
        public double y_pilot;
        public double z_pilot;
        public double yaw_pilot;
        public double x_effort;
        public double y_effort;
        public double z_effort;
        public double yaw_effort;
 
        public mini_rov_status_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x09b1d97e89c2fdceL;
 
        static mini_rov_status_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mwt.mini_rov_status_t"))
                return 0L;
 
            classes.Add("mwt.mini_rov_status_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + mwt.header_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.auto_head); 
 
            outs.Write(this.auto_vert); 
 
            outs.Write(this.adv_nav); 
 
            outs.Write(this.auto_head_sp); 
 
            outs.Write(this.auto_depth_sp); 
 
            outs.Write(this.x_pilot); 
 
            outs.Write(this.y_pilot); 
 
            outs.Write(this.z_pilot); 
 
            outs.Write(this.yaw_pilot); 
 
            outs.Write(this.x_effort); 
 
            outs.Write(this.y_effort); 
 
            outs.Write(this.z_effort); 
 
            outs.Write(this.yaw_effort); 
 
        }
 
        public mini_rov_status_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public mini_rov_status_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mwt.mini_rov_status_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mwt.mini_rov_status_t o = new mwt.mini_rov_status_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = mwt.header_t._decodeRecursiveFactory(ins);
 
            this.auto_head = ins.ReadBoolean();
 
            this.auto_vert = ins.ReadBoolean();
 
            this.adv_nav = ins.ReadBoolean();
 
            this.auto_head_sp = ins.ReadDouble();
 
            this.auto_depth_sp = ins.ReadDouble();
 
            this.x_pilot = ins.ReadDouble();
 
            this.y_pilot = ins.ReadDouble();
 
            this.z_pilot = ins.ReadDouble();
 
            this.yaw_pilot = ins.ReadDouble();
 
            this.x_effort = ins.ReadDouble();
 
            this.y_effort = ins.ReadDouble();
 
            this.z_effort = ins.ReadDouble();
 
            this.yaw_effort = ins.ReadDouble();
 
        }
 
        public mwt.mini_rov_status_t Copy()
        {
            mwt.mini_rov_status_t outobj = new mwt.mini_rov_status_t();
            outobj.header = this.header.Copy();
 
            outobj.auto_head = this.auto_head;
 
            outobj.auto_vert = this.auto_vert;
 
            outobj.adv_nav = this.adv_nav;
 
            outobj.auto_head_sp = this.auto_head_sp;
 
            outobj.auto_depth_sp = this.auto_depth_sp;
 
            outobj.x_pilot = this.x_pilot;
 
            outobj.y_pilot = this.y_pilot;
 
            outobj.z_pilot = this.z_pilot;
 
            outobj.yaw_pilot = this.yaw_pilot;
 
            outobj.x_effort = this.x_effort;
 
            outobj.y_effort = this.y_effort;
 
            outobj.z_effort = this.z_effort;
 
            outobj.yaw_effort = this.yaw_effort;
 
            return outobj;
        }
    }
}

