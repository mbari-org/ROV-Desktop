/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mwt
{
    public sealed class mwt_control_status_t : LCM.LCM.LCMEncodable
    {
        public mwt.header_t header;
        public mwt.controller_status_t range_control;
        public mwt.controller_status_t lateral_control;
        public mwt.controller_status_t vertical_control;
        public mwt.controller_status_t bearing_control;
        public mwt.trajectory_status_t range_traj;
        public mwt.trajectory_status_t lateral_traj;
        public mwt.trajectory_status_t vertical_traj;
        public mwt.trajectory_status_t bearing_traj;
        public mwt.filter_status_t range_filter;
        public mwt.filter_status_t lateral_filter;
        public mwt.filter_status_t vertical_filter;
        public mwt.filter_status_t bearing_filter;
        public mwt.filter_status_t range_gs_filter;
        public mwt.filter_status_t heading_gs_filter;
        public mwt.filter_status_t bearing_gs_filter;
        public mwt.gain_scale_status_t lateral_gs;
        public mwt.gain_scale_status_t bearing_gs;
        public bool is_pilot_enabled;
        public bool is_control_enabled;
        public bool is_x_effort_enabled;
        public bool is_y_effort_enabled;
        public bool is_z_effort_enabled;
        public bool is_psi_effort_enabled;
        public double control_exec_ms;
        public double other_exec_ms;
        public double percent_idle;
        public long missed_updates;
 
        public mwt_control_status_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xcfdb15991e731c60L;
 
        static mwt_control_status_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mwt.mwt_control_status_t"))
                return 0L;
 
            classes.Add("mwt.mwt_control_status_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + mwt.header_t._hashRecursive(classes)
                 + mwt.controller_status_t._hashRecursive(classes)
                 + mwt.controller_status_t._hashRecursive(classes)
                 + mwt.controller_status_t._hashRecursive(classes)
                 + mwt.controller_status_t._hashRecursive(classes)
                 + mwt.trajectory_status_t._hashRecursive(classes)
                 + mwt.trajectory_status_t._hashRecursive(classes)
                 + mwt.trajectory_status_t._hashRecursive(classes)
                 + mwt.trajectory_status_t._hashRecursive(classes)
                 + mwt.filter_status_t._hashRecursive(classes)
                 + mwt.filter_status_t._hashRecursive(classes)
                 + mwt.filter_status_t._hashRecursive(classes)
                 + mwt.filter_status_t._hashRecursive(classes)
                 + mwt.filter_status_t._hashRecursive(classes)
                 + mwt.filter_status_t._hashRecursive(classes)
                 + mwt.filter_status_t._hashRecursive(classes)
                 + mwt.gain_scale_status_t._hashRecursive(classes)
                 + mwt.gain_scale_status_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            this.range_control._encodeRecursive(outs); 
 
            this.lateral_control._encodeRecursive(outs); 
 
            this.vertical_control._encodeRecursive(outs); 
 
            this.bearing_control._encodeRecursive(outs); 
 
            this.range_traj._encodeRecursive(outs); 
 
            this.lateral_traj._encodeRecursive(outs); 
 
            this.vertical_traj._encodeRecursive(outs); 
 
            this.bearing_traj._encodeRecursive(outs); 
 
            this.range_filter._encodeRecursive(outs); 
 
            this.lateral_filter._encodeRecursive(outs); 
 
            this.vertical_filter._encodeRecursive(outs); 
 
            this.bearing_filter._encodeRecursive(outs); 
 
            this.range_gs_filter._encodeRecursive(outs); 
 
            this.heading_gs_filter._encodeRecursive(outs); 
 
            this.bearing_gs_filter._encodeRecursive(outs); 
 
            this.lateral_gs._encodeRecursive(outs); 
 
            this.bearing_gs._encodeRecursive(outs); 
 
            outs.Write(this.is_pilot_enabled); 
 
            outs.Write(this.is_control_enabled); 
 
            outs.Write(this.is_x_effort_enabled); 
 
            outs.Write(this.is_y_effort_enabled); 
 
            outs.Write(this.is_z_effort_enabled); 
 
            outs.Write(this.is_psi_effort_enabled); 
 
            outs.Write(this.control_exec_ms); 
 
            outs.Write(this.other_exec_ms); 
 
            outs.Write(this.percent_idle); 
 
            outs.Write(this.missed_updates); 
 
        }
 
        public mwt_control_status_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public mwt_control_status_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mwt.mwt_control_status_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mwt.mwt_control_status_t o = new mwt.mwt_control_status_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = mwt.header_t._decodeRecursiveFactory(ins);
 
            this.range_control = mwt.controller_status_t._decodeRecursiveFactory(ins);
 
            this.lateral_control = mwt.controller_status_t._decodeRecursiveFactory(ins);
 
            this.vertical_control = mwt.controller_status_t._decodeRecursiveFactory(ins);
 
            this.bearing_control = mwt.controller_status_t._decodeRecursiveFactory(ins);
 
            this.range_traj = mwt.trajectory_status_t._decodeRecursiveFactory(ins);
 
            this.lateral_traj = mwt.trajectory_status_t._decodeRecursiveFactory(ins);
 
            this.vertical_traj = mwt.trajectory_status_t._decodeRecursiveFactory(ins);
 
            this.bearing_traj = mwt.trajectory_status_t._decodeRecursiveFactory(ins);
 
            this.range_filter = mwt.filter_status_t._decodeRecursiveFactory(ins);
 
            this.lateral_filter = mwt.filter_status_t._decodeRecursiveFactory(ins);
 
            this.vertical_filter = mwt.filter_status_t._decodeRecursiveFactory(ins);
 
            this.bearing_filter = mwt.filter_status_t._decodeRecursiveFactory(ins);
 
            this.range_gs_filter = mwt.filter_status_t._decodeRecursiveFactory(ins);
 
            this.heading_gs_filter = mwt.filter_status_t._decodeRecursiveFactory(ins);
 
            this.bearing_gs_filter = mwt.filter_status_t._decodeRecursiveFactory(ins);
 
            this.lateral_gs = mwt.gain_scale_status_t._decodeRecursiveFactory(ins);
 
            this.bearing_gs = mwt.gain_scale_status_t._decodeRecursiveFactory(ins);
 
            this.is_pilot_enabled = ins.ReadBoolean();
 
            this.is_control_enabled = ins.ReadBoolean();
 
            this.is_x_effort_enabled = ins.ReadBoolean();
 
            this.is_y_effort_enabled = ins.ReadBoolean();
 
            this.is_z_effort_enabled = ins.ReadBoolean();
 
            this.is_psi_effort_enabled = ins.ReadBoolean();
 
            this.control_exec_ms = ins.ReadDouble();
 
            this.other_exec_ms = ins.ReadDouble();
 
            this.percent_idle = ins.ReadDouble();
 
            this.missed_updates = ins.ReadInt64();
 
        }
 
        public mwt.mwt_control_status_t Copy()
        {
            mwt.mwt_control_status_t outobj = new mwt.mwt_control_status_t();
            outobj.header = this.header.Copy();
 
            outobj.range_control = this.range_control.Copy();
 
            outobj.lateral_control = this.lateral_control.Copy();
 
            outobj.vertical_control = this.vertical_control.Copy();
 
            outobj.bearing_control = this.bearing_control.Copy();
 
            outobj.range_traj = this.range_traj.Copy();
 
            outobj.lateral_traj = this.lateral_traj.Copy();
 
            outobj.vertical_traj = this.vertical_traj.Copy();
 
            outobj.bearing_traj = this.bearing_traj.Copy();
 
            outobj.range_filter = this.range_filter.Copy();
 
            outobj.lateral_filter = this.lateral_filter.Copy();
 
            outobj.vertical_filter = this.vertical_filter.Copy();
 
            outobj.bearing_filter = this.bearing_filter.Copy();
 
            outobj.range_gs_filter = this.range_gs_filter.Copy();
 
            outobj.heading_gs_filter = this.heading_gs_filter.Copy();
 
            outobj.bearing_gs_filter = this.bearing_gs_filter.Copy();
 
            outobj.lateral_gs = this.lateral_gs.Copy();
 
            outobj.bearing_gs = this.bearing_gs.Copy();
 
            outobj.is_pilot_enabled = this.is_pilot_enabled;
 
            outobj.is_control_enabled = this.is_control_enabled;
 
            outobj.is_x_effort_enabled = this.is_x_effort_enabled;
 
            outobj.is_y_effort_enabled = this.is_y_effort_enabled;
 
            outobj.is_z_effort_enabled = this.is_z_effort_enabled;
 
            outobj.is_psi_effort_enabled = this.is_psi_effort_enabled;
 
            outobj.control_exec_ms = this.control_exec_ms;
 
            outobj.other_exec_ms = this.other_exec_ms;
 
            outobj.percent_idle = this.percent_idle;
 
            outobj.missed_updates = this.missed_updates;
 
            return outobj;
        }
    }
}

