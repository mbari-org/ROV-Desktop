/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mwt
{
    public sealed class mwt_target_t : LCM.LCM.LCMEncodable
    {
        public mwt.header_t header;
        public double range_meters;
        public double bearing_degrees;
        public double z_meters;
        public bool range_valid;
        public bool bearing_valid;
        public bool z_valid;
        public double left_pix_x;
        public double left_pix_y;
        public double right_pix_x;
        public double right_pix_y;
 
        public mwt_target_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0xa8d333e2c0719be0L;
 
        static mwt_target_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mwt.mwt_target_t"))
                return 0L;
 
            classes.Add("mwt.mwt_target_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + mwt.header_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.range_meters); 
 
            outs.Write(this.bearing_degrees); 
 
            outs.Write(this.z_meters); 
 
            outs.Write(this.range_valid); 
 
            outs.Write(this.bearing_valid); 
 
            outs.Write(this.z_valid); 
 
            outs.Write(this.left_pix_x); 
 
            outs.Write(this.left_pix_y); 
 
            outs.Write(this.right_pix_x); 
 
            outs.Write(this.right_pix_y); 
 
        }
 
        public mwt_target_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public mwt_target_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mwt.mwt_target_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mwt.mwt_target_t o = new mwt.mwt_target_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = mwt.header_t._decodeRecursiveFactory(ins);
 
            this.range_meters = ins.ReadDouble();
 
            this.bearing_degrees = ins.ReadDouble();
 
            this.z_meters = ins.ReadDouble();
 
            this.range_valid = ins.ReadBoolean();
 
            this.bearing_valid = ins.ReadBoolean();
 
            this.z_valid = ins.ReadBoolean();
 
            this.left_pix_x = ins.ReadDouble();
 
            this.left_pix_y = ins.ReadDouble();
 
            this.right_pix_x = ins.ReadDouble();
 
            this.right_pix_y = ins.ReadDouble();
 
        }
 
        public mwt.mwt_target_t Copy()
        {
            mwt.mwt_target_t outobj = new mwt.mwt_target_t();
            outobj.header = this.header.Copy();
 
            outobj.range_meters = this.range_meters;
 
            outobj.bearing_degrees = this.bearing_degrees;
 
            outobj.z_meters = this.z_meters;
 
            outobj.range_valid = this.range_valid;
 
            outobj.bearing_valid = this.bearing_valid;
 
            outobj.z_valid = this.z_valid;
 
            outobj.left_pix_x = this.left_pix_x;
 
            outobj.left_pix_y = this.left_pix_y;
 
            outobj.right_pix_x = this.right_pix_x;
 
            outobj.right_pix_y = this.right_pix_y;
 
            return outobj;
        }
    }
}

