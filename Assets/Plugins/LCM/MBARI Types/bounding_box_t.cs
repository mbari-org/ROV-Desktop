/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mwt
{
    public sealed class bounding_box_t : LCM.LCM.LCMEncodable
    {
        public double left;
        public double top;
        public double width;
        public double height;
        public sbyte num_classes;
        public double[] scores;
        public String class_name;
 
        public bounding_box_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x76416b29cdb9c76cL;
 
        static bounding_box_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mwt.bounding_box_t"))
                return 0L;
 
            classes.Add("mwt.bounding_box_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            outs.Write(this.left); 
 
            outs.Write(this.top); 
 
            outs.Write(this.width); 
 
            outs.Write(this.height); 
 
            outs.Write(this.num_classes); 
 
            for (int a = 0; a < this.num_classes; a++) {
                outs.Write(this.scores[a]); 
            }
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.class_name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
        }
 
        public bounding_box_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public bounding_box_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mwt.bounding_box_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mwt.bounding_box_t o = new mwt.bounding_box_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.left = ins.ReadDouble();
 
            this.top = ins.ReadDouble();
 
            this.width = ins.ReadDouble();
 
            this.height = ins.ReadDouble();
 
            this.num_classes = ins.ReadSByte();
 
            this.scores = new double[(int) num_classes];
            for (int a = 0; a < this.num_classes; a++) {
                this.scores[a] = ins.ReadDouble();
            }
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.class_name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
        }
 
        public mwt.bounding_box_t Copy()
        {
            mwt.bounding_box_t outobj = new mwt.bounding_box_t();
            outobj.left = this.left;
 
            outobj.top = this.top;
 
            outobj.width = this.width;
 
            outobj.height = this.height;
 
            outobj.num_classes = this.num_classes;
 
            outobj.scores = new double[(int) num_classes];
            for (int a = 0; a < this.num_classes; a++) {
                outobj.scores[a] = this.scores[a];
            }
 
            outobj.class_name = this.class_name;
 
            return outobj;
        }
    }
}

