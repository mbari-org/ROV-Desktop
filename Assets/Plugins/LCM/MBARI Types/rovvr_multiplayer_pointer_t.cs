/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mwt
{
    public sealed class rovvr_multiplayer_pointer_t : LCM.LCM.LCMEncodable
    {
        public String id;
        public String name;
        public String color;
        public double position_x;
        public double position_y;
        public double position_z;
 
        public rovvr_multiplayer_pointer_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x4e220d9313d181caL;
 
        static rovvr_multiplayer_pointer_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mwt.rovvr_multiplayer_pointer_t"))
                return 0L;
 
            classes.Add("mwt.rovvr_multiplayer_pointer_t");
            ulong hash = LCM_FINGERPRINT_BASE
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.id); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.color); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.position_x); 
 
            outs.Write(this.position_y); 
 
            outs.Write(this.position_z); 
 
        }
 
        public rovvr_multiplayer_pointer_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public rovvr_multiplayer_pointer_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mwt.rovvr_multiplayer_pointer_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mwt.rovvr_multiplayer_pointer_t o = new mwt.rovvr_multiplayer_pointer_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.id = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.color = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.position_x = ins.ReadDouble();
 
            this.position_y = ins.ReadDouble();
 
            this.position_z = ins.ReadDouble();
 
        }
 
        public mwt.rovvr_multiplayer_pointer_t Copy()
        {
            mwt.rovvr_multiplayer_pointer_t outobj = new mwt.rovvr_multiplayer_pointer_t();
            outobj.id = this.id;
 
            outobj.name = this.name;
 
            outobj.color = this.color;
 
            outobj.position_x = this.position_x;
 
            outobj.position_y = this.position_y;
 
            outobj.position_z = this.position_z;
 
            return outobj;
        }
    }
}

