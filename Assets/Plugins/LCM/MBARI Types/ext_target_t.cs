/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mwt
{
    public sealed class ext_target_t : LCM.LCM.LCMEncodable
    {
        public mwt.header_t header;
        public long left_utime;
        public long right_utime;
        public String left_class_name;
        public String right_class_name;
        public double left_x;
        public double left_y;
        public double right_x;
        public double right_y;
        public double left_box_width;
        public double left_box_height;
        public double right_box_width;
        public double right_box_height;
        public double conf_left;
        public double conf_right;
        public double source;
 
        public ext_target_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x9de6ea0e2b79acb9L;
 
        static ext_target_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mwt.ext_target_t"))
                return 0L;
 
            classes.Add("mwt.ext_target_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + mwt.header_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            byte[] __strbuf = null;
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.left_utime); 
 
            outs.Write(this.right_utime); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.left_class_name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            __strbuf = System.Text.Encoding.GetEncoding("US-ASCII").GetBytes(this.right_class_name); outs.Write(__strbuf.Length+1); outs.Write(__strbuf, 0, __strbuf.Length); outs.Write((byte) 0); 
 
            outs.Write(this.left_x); 
 
            outs.Write(this.left_y); 
 
            outs.Write(this.right_x); 
 
            outs.Write(this.right_y); 
 
            outs.Write(this.left_box_width); 
 
            outs.Write(this.left_box_height); 
 
            outs.Write(this.right_box_width); 
 
            outs.Write(this.right_box_height); 
 
            outs.Write(this.conf_left); 
 
            outs.Write(this.conf_right); 
 
            outs.Write(this.source); 
 
        }
 
        public ext_target_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public ext_target_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mwt.ext_target_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mwt.ext_target_t o = new mwt.ext_target_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            byte[] __strbuf = null;
            this.header = mwt.header_t._decodeRecursiveFactory(ins);
 
            this.left_utime = ins.ReadInt64();
 
            this.right_utime = ins.ReadInt64();
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.left_class_name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            __strbuf = new byte[ins.ReadInt32()-1]; ins.ReadFully(__strbuf); ins.ReadByte(); this.right_class_name = System.Text.Encoding.GetEncoding("US-ASCII").GetString(__strbuf);
 
            this.left_x = ins.ReadDouble();
 
            this.left_y = ins.ReadDouble();
 
            this.right_x = ins.ReadDouble();
 
            this.right_y = ins.ReadDouble();
 
            this.left_box_width = ins.ReadDouble();
 
            this.left_box_height = ins.ReadDouble();
 
            this.right_box_width = ins.ReadDouble();
 
            this.right_box_height = ins.ReadDouble();
 
            this.conf_left = ins.ReadDouble();
 
            this.conf_right = ins.ReadDouble();
 
            this.source = ins.ReadDouble();
 
        }
 
        public mwt.ext_target_t Copy()
        {
            mwt.ext_target_t outobj = new mwt.ext_target_t();
            outobj.header = this.header.Copy();
 
            outobj.left_utime = this.left_utime;
 
            outobj.right_utime = this.right_utime;
 
            outobj.left_class_name = this.left_class_name;
 
            outobj.right_class_name = this.right_class_name;
 
            outobj.left_x = this.left_x;
 
            outobj.left_y = this.left_y;
 
            outobj.right_x = this.right_x;
 
            outobj.right_y = this.right_y;
 
            outobj.left_box_width = this.left_box_width;
 
            outobj.left_box_height = this.left_box_height;
 
            outobj.right_box_width = this.right_box_width;
 
            outobj.right_box_height = this.right_box_height;
 
            outobj.conf_left = this.conf_left;
 
            outobj.conf_right = this.conf_right;
 
            outobj.source = this.source;
 
            return outobj;
        }
    }
}

