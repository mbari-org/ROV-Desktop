/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mwt
{
    public sealed class cvt_status_t : LCM.LCM.LCMEncodable
    {
        public mwt.header_t header;
        public double roi_width;
        public double roi_height;
        public double roi_left_age;
        public double roi_right_age;
        public double conf_left;
        public double conf_right;
        public double target_left_x;
        public double target_left_y;
        public double target_right_x;
        public double target_right_y;
        public double range_meters;
        public double bearing_deg;
        public double z_err_meters;
        public double epi_error;
        public long roi_reinit_cnt;
        public long ext_target_rx_cnt;
        public bool target_left_located;
        public bool target_right_located;
 
        public cvt_status_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x5648ebd51c76ef84L;
 
        static cvt_status_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mwt.cvt_status_t"))
                return 0L;
 
            classes.Add("mwt.cvt_status_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + mwt.header_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.roi_width); 
 
            outs.Write(this.roi_height); 
 
            outs.Write(this.roi_left_age); 
 
            outs.Write(this.roi_right_age); 
 
            outs.Write(this.conf_left); 
 
            outs.Write(this.conf_right); 
 
            outs.Write(this.target_left_x); 
 
            outs.Write(this.target_left_y); 
 
            outs.Write(this.target_right_x); 
 
            outs.Write(this.target_right_y); 
 
            outs.Write(this.range_meters); 
 
            outs.Write(this.bearing_deg); 
 
            outs.Write(this.z_err_meters); 
 
            outs.Write(this.epi_error); 
 
            outs.Write(this.roi_reinit_cnt); 
 
            outs.Write(this.ext_target_rx_cnt); 
 
            outs.Write(this.target_left_located); 
 
            outs.Write(this.target_right_located); 
 
        }
 
        public cvt_status_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public cvt_status_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mwt.cvt_status_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mwt.cvt_status_t o = new mwt.cvt_status_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = mwt.header_t._decodeRecursiveFactory(ins);
 
            this.roi_width = ins.ReadDouble();
 
            this.roi_height = ins.ReadDouble();
 
            this.roi_left_age = ins.ReadDouble();
 
            this.roi_right_age = ins.ReadDouble();
 
            this.conf_left = ins.ReadDouble();
 
            this.conf_right = ins.ReadDouble();
 
            this.target_left_x = ins.ReadDouble();
 
            this.target_left_y = ins.ReadDouble();
 
            this.target_right_x = ins.ReadDouble();
 
            this.target_right_y = ins.ReadDouble();
 
            this.range_meters = ins.ReadDouble();
 
            this.bearing_deg = ins.ReadDouble();
 
            this.z_err_meters = ins.ReadDouble();
 
            this.epi_error = ins.ReadDouble();
 
            this.roi_reinit_cnt = ins.ReadInt64();
 
            this.ext_target_rx_cnt = ins.ReadInt64();
 
            this.target_left_located = ins.ReadBoolean();
 
            this.target_right_located = ins.ReadBoolean();
 
        }
 
        public mwt.cvt_status_t Copy()
        {
            mwt.cvt_status_t outobj = new mwt.cvt_status_t();
            outobj.header = this.header.Copy();
 
            outobj.roi_width = this.roi_width;
 
            outobj.roi_height = this.roi_height;
 
            outobj.roi_left_age = this.roi_left_age;
 
            outobj.roi_right_age = this.roi_right_age;
 
            outobj.conf_left = this.conf_left;
 
            outobj.conf_right = this.conf_right;
 
            outobj.target_left_x = this.target_left_x;
 
            outobj.target_left_y = this.target_left_y;
 
            outobj.target_right_x = this.target_right_x;
 
            outobj.target_right_y = this.target_right_y;
 
            outobj.range_meters = this.range_meters;
 
            outobj.bearing_deg = this.bearing_deg;
 
            outobj.z_err_meters = this.z_err_meters;
 
            outobj.epi_error = this.epi_error;
 
            outobj.roi_reinit_cnt = this.roi_reinit_cnt;
 
            outobj.ext_target_rx_cnt = this.ext_target_rx_cnt;
 
            outobj.target_left_located = this.target_left_located;
 
            outobj.target_right_located = this.target_right_located;
 
            return outobj;
        }
    }
}

