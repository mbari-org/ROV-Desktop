/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

using System;
using System.Collections.Generic;
using System.IO;
using LCM.LCM;
 
namespace mwt
{
    public sealed class mwt_status_t : LCM.LCM.LCMEncodable
    {
        public mwt.header_t header;
        public int tracking_mode;
        public bool check_epi_err;
        public bool check_euc_dist;
        public bool use_wf_tracking;
        public double epi_err;
        public double euc_dist;
        public double max_epi_err;
        public double max_euc_dist;
        public double current_vf_x;
        public double current_vf_y;
        public double current_vf_z;
        public double current_wf_x;
        public double current_wf_y;
        public double current_wf_z;
        public bool filter_cached_vf;
        public bool filter_cached_wf;
        public double cached_vf_x;
        public double cached_vf_y;
        public double cached_vf_z;
        public double cached_wf_x;
        public double cached_wf_y;
        public double cached_wf_z;
        public double target_source;
 
        public mwt_status_t()
        {
        }
 
        public static readonly ulong LCM_FINGERPRINT;
        public static readonly ulong LCM_FINGERPRINT_BASE = 0x719d1b6bb7fe59d7L;
 
        static mwt_status_t()
        {
            LCM_FINGERPRINT = _hashRecursive(new List<String>());
        }
 
        public static ulong _hashRecursive(List<String> classes)
        {
            if (classes.Contains("mwt.mwt_status_t"))
                return 0L;
 
            classes.Add("mwt.mwt_status_t");
            ulong hash = LCM_FINGERPRINT_BASE
                 + mwt.header_t._hashRecursive(classes)
                ;
            classes.RemoveAt(classes.Count - 1);
            return (hash<<1) + ((hash>>63)&1);
        }
 
        public void Encode(LCMDataOutputStream outs)
        {
            outs.Write((long) LCM_FINGERPRINT);
            _encodeRecursive(outs);
        }
 
        public void _encodeRecursive(LCMDataOutputStream outs)
        {
            this.header._encodeRecursive(outs); 
 
            outs.Write(this.tracking_mode); 
 
            outs.Write(this.check_epi_err); 
 
            outs.Write(this.check_euc_dist); 
 
            outs.Write(this.use_wf_tracking); 
 
            outs.Write(this.epi_err); 
 
            outs.Write(this.euc_dist); 
 
            outs.Write(this.max_epi_err); 
 
            outs.Write(this.max_euc_dist); 
 
            outs.Write(this.current_vf_x); 
 
            outs.Write(this.current_vf_y); 
 
            outs.Write(this.current_vf_z); 
 
            outs.Write(this.current_wf_x); 
 
            outs.Write(this.current_wf_y); 
 
            outs.Write(this.current_wf_z); 
 
            outs.Write(this.filter_cached_vf); 
 
            outs.Write(this.filter_cached_wf); 
 
            outs.Write(this.cached_vf_x); 
 
            outs.Write(this.cached_vf_y); 
 
            outs.Write(this.cached_vf_z); 
 
            outs.Write(this.cached_wf_x); 
 
            outs.Write(this.cached_wf_y); 
 
            outs.Write(this.cached_wf_z); 
 
            outs.Write(this.target_source); 
 
        }
 
        public mwt_status_t(byte[] data) : this(new LCMDataInputStream(data))
        {
        }
 
        public mwt_status_t(LCMDataInputStream ins)
        {
            if ((ulong) ins.ReadInt64() != LCM_FINGERPRINT)
                throw new System.IO.IOException("LCM Decode error: bad fingerprint");
 
            _decodeRecursive(ins);
        }
 
        public static mwt.mwt_status_t _decodeRecursiveFactory(LCMDataInputStream ins)
        {
            mwt.mwt_status_t o = new mwt.mwt_status_t();
            o._decodeRecursive(ins);
            return o;
        }
 
        public void _decodeRecursive(LCMDataInputStream ins)
        {
            this.header = mwt.header_t._decodeRecursiveFactory(ins);
 
            this.tracking_mode = ins.ReadInt32();
 
            this.check_epi_err = ins.ReadBoolean();
 
            this.check_euc_dist = ins.ReadBoolean();
 
            this.use_wf_tracking = ins.ReadBoolean();
 
            this.epi_err = ins.ReadDouble();
 
            this.euc_dist = ins.ReadDouble();
 
            this.max_epi_err = ins.ReadDouble();
 
            this.max_euc_dist = ins.ReadDouble();
 
            this.current_vf_x = ins.ReadDouble();
 
            this.current_vf_y = ins.ReadDouble();
 
            this.current_vf_z = ins.ReadDouble();
 
            this.current_wf_x = ins.ReadDouble();
 
            this.current_wf_y = ins.ReadDouble();
 
            this.current_wf_z = ins.ReadDouble();
 
            this.filter_cached_vf = ins.ReadBoolean();
 
            this.filter_cached_wf = ins.ReadBoolean();
 
            this.cached_vf_x = ins.ReadDouble();
 
            this.cached_vf_y = ins.ReadDouble();
 
            this.cached_vf_z = ins.ReadDouble();
 
            this.cached_wf_x = ins.ReadDouble();
 
            this.cached_wf_y = ins.ReadDouble();
 
            this.cached_wf_z = ins.ReadDouble();
 
            this.target_source = ins.ReadDouble();
 
        }
 
        public mwt.mwt_status_t Copy()
        {
            mwt.mwt_status_t outobj = new mwt.mwt_status_t();
            outobj.header = this.header.Copy();
 
            outobj.tracking_mode = this.tracking_mode;
 
            outobj.check_epi_err = this.check_epi_err;
 
            outobj.check_euc_dist = this.check_euc_dist;
 
            outobj.use_wf_tracking = this.use_wf_tracking;
 
            outobj.epi_err = this.epi_err;
 
            outobj.euc_dist = this.euc_dist;
 
            outobj.max_epi_err = this.max_epi_err;
 
            outobj.max_euc_dist = this.max_euc_dist;
 
            outobj.current_vf_x = this.current_vf_x;
 
            outobj.current_vf_y = this.current_vf_y;
 
            outobj.current_vf_z = this.current_vf_z;
 
            outobj.current_wf_x = this.current_wf_x;
 
            outobj.current_wf_y = this.current_wf_y;
 
            outobj.current_wf_z = this.current_wf_z;
 
            outobj.filter_cached_vf = this.filter_cached_vf;
 
            outobj.filter_cached_wf = this.filter_cached_wf;
 
            outobj.cached_vf_x = this.cached_vf_x;
 
            outobj.cached_vf_y = this.cached_vf_y;
 
            outobj.cached_vf_z = this.cached_vf_z;
 
            outobj.cached_wf_x = this.cached_wf_x;
 
            outobj.cached_wf_y = this.cached_wf_y;
 
            outobj.cached_wf_z = this.cached_wf_z;
 
            outobj.target_source = this.target_source;
 
            return outobj;
        }
    }
}

